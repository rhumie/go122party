func (idx *routingIndex) possiblyConflictingPatterns(pat *pattern, f func(*pattern) error) (err error) {
// Terminology:
// dollar pattern: one ending in "{$}"
// multi pattern: one ending in a trailing slash or "{x...}" wildcard
// ordinary pattern: neither of the above

    // apply f to all the pats, stopping on error.
    apply := func(pats []*pattern) error {
    	if err != nil {
    		return err
    	}
    	for _, p := range pats {
    		err = f(p)
    		if err != nil {
    			return err
    		}
    	}
    	return nil
    }

    // Our simple indexing scheme doesn't try to prune multi patterns; assume
    // any of them can match the argument.
    if err := apply(idx.multis); err != nil {
    	return err
    }
    if pat.lastSegment().s == "/" {
    	// All paths that a dollar pattern matches end in a slash; no paths that
    	// an ordinary pattern matches do. So only other dollar or multi
    	// patterns can conflict with a dollar pattern. Furthermore, conflicting
    	// dollar patterns must have the {$} in the same position.
    	return apply(idx.segments[routingIndexKey{s: "/", pos: len(pat.segments) - 1}])
    }
    // For ordinary and multi patterns, the only conflicts can be with a multi,
    // or a pattern that has the same literal or a wildcard at some literal
    // position.
    // We could intersect all the possible matches at each position, but we
    // do something simpler: we find the position with the fewest patterns.
    var lmin, wmin []*pattern
    min := math.MaxInt
    hasLit := false
    for i, seg := range pat.segments {
    	if seg.multi {
    		break
    	}
    	if !seg.wild {
    		hasLit = true
    		lpats := idx.segments[routingIndexKey{s: seg.s, pos: i}]
    		wpats := idx.segments[routingIndexKey{s: "", pos: i}]
    		if sum := len(lpats) + len(wpats); sum < min {
    			lmin = lpats
    			wmin = wpats
    			min = sum
    		}
    	}
    }
    if hasLit {
    	apply(lmin)
    	apply(wmin)
    	return err
    }

    // This pattern is all wildcards.
    // Check it against everything.
    for _, pats := range idx.segments {
    	apply(pats)
    }
    return err

}
